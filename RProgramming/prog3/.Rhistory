factorial(69)
factorial(200)
factorial(136)
factorial(140)
factorial(150)
help paste
help(paste)
help(format)
help(formatC)
help(sapply)
source('~/.active-rstudio-document')
pollutantLists <- sapply(id, function(id) getData(directory, pollutant, id))
source('~/.active-rstudio-document')
pollutants <- unlist(pollutantLists)
getData <- function(workingDir, pollutant, id) {
dir <- "/Volumes/data/code/datasciencecoursera/RProgramming/prog1/specdata"
pollutantmean(dir, "sulfate", 1:10)
pollutantmean(dir, "nitrate", 70:72)
รง
quit
exit
exit
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
pollutantmean(dir, "nitrate", 70:72)
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
pollutantmean(dir, "nitrate", 23)
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
createFilePath <- paste(wrkingDir, "/", createFileName, sep = "")
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
createFilePath <- paste(directory, "/", createFileName, sep = "")
help(paste)
help(print)
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
print(directory)
help(sapply)
createFileName <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
createFilePath <- paste(directory, "/", createFileName, sep = "")
getData <- function(directory, pollutant, id) {
## if the id is single or double digit, we have to build it to 3 digits for the
## file name.
print(directory)
createFileName <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
createFilePath <- paste(directory, "/", createFileName, sep = "")
inputData <- read.csv(createFilePath)
## just get the data for the pollutant that we want
pollutantList <- inputData[[pollutant]]
## get the NA's out of the dataset
pollutantList[!is.na(pollutantList)]
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
pollutantLists <- sapply(id, function(id) getData(directory, pollutant, id))
pollutants <- unlist(pollutantLists)
mean(pollutants)
}
dir <- "/Volumes/data/code/datasciencecoursera/RProgramming/prog1/specdata"
pollutantmean(dir, "sulfate", 1:10)
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
pollutantmean(dir, "nitrate", 70:72)
pollutantmean(dir, "nitrate", 23)
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
help(unlist)
help(mean)
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
getData <- function(directory, pollutant, id) {
## if the id is single or double digit, we have to build it to 3 digits for the
## file name.
createFileName <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
createFilePath <- paste(directory, "/", createFileName, sep = "")
inputData <- read.csv(createFilePath)
## just get the data for the pollutant that we want
pollutantValueList <- inputData[[pollutant]]
## get the NA's out of the dataset
pollutantValueList[!is.na(pollutantValueList)]
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
pollutantValueList <- sapply(id, function(id) getData(directory, pollutant, id))
## convert back to a vector so we can take the mean
pollutantValues <- unlist(pollutantValueList)
mean(pollutantValues)
}
dir <- "/Volumes/data/code/datasciencecoursera/RProgramming/prog1/specdata"
pollutantmean(dir, "sulfate", 1:10)
source("pollutantmean.R")
source("/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R")
pollutantmean(dir, "sulfate", 1:10)
pollutantmean(dir, "nitrate", 70:72)
pollutantmean(dir, "nitrate", 23)
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
getData <- function(directory, id) {
## if the id is single or double digit, we have to build it to 3 digits for the
## file name.
createFileName <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
createFilePath <- paste(directory, "/", createFileName, sep = "")
inputData <- read.csv(createFilePath)
}
getList(directory, pollutant, id){
getData(directory, id)
## just get the data for the pollutant that we want
pollutantValueList <- inputData[[pollutant]]
## get the NA's out of the dataset
pollutantValueList[!is.na(pollutantValueList)]
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
pollutantValueList <- sapply(id, function(id) getList(directory, pollutant, id))
## convert back to a vector so we can take the mean
pollutantValues <- unlist(pollutantValueList)
mean(pollutantValues)
}
getList(directory, pollutant, id){
getData(directory, id)
## just get the data for the pollutant that we want
pollutantValueList <- inputData[[pollutant]]
## get the NA's out of the dataset
pollutantValueList[!is.na(pollutantValueList)]
}
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
getData <- function(directory, id) {
## if the id is single or double digit, we have to build it to 3 digits for the
## file name.
createFileName <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
createFilePath <- paste(directory, "/", createFileName, sep = "")
return(inputData <- read.csv(createFilePath))
}
getList(directory, pollutant, id){
inputData <- getData(directory, id)
## just get the data for the pollutant that we want
pollutantValueList <- inputData[[pollutant]]
## get the NA's out of the dataset
pollutantValueList[!is.na(pollutantValueList)]
}
getData <- function(directory, id) {
## if the id is single or double digit, we have to build it to 3 digits for the
## file name.
createFileName <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
createFilePath <- paste(directory, "/", createFileName, sep = "")
return(inputData <- read.csv(createFilePath))
}
getList(directory, pollutant, id){
inputData <- getData(directory, id)
## just get the data for the pollutant that we want
pollutantValueList <- inputData[[pollutant]]
## get the NA's out of the dataset
pollutantValueList[!is.na(pollutantValueList)]
}
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
getData <- function(directory, pollutant, id) {
## if the id is single or double digit, we have to build it to 3 digits for the
## file name.
createFileName <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
createFilePath <- paste(directory, "/", createFileName, sep = "")
inputData <- read.csv(createFilePath)
## just get the data for the pollutant that we want
pollutantValueList <- inputData[[pollutant]]
## get the NA's out of the dataset
pollutantValueList[!is.na(pollutantValueList)]
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
pollutantValueList <- sapply(id, function(id) getData(directory, pollutant, id))
## convert back to a vector so we can take the mean
pollutantValues <- unlist(pollutantValueList)
mean(pollutantValues)
}
dir <- "/Volumes/data/code/datasciencecoursera/RProgramming/prog1/specdata"
pollutantmean(dir, "sulfate", 1:10)
pollutantmean(dir, "nitrate", 70:72)
pollutantmean(dir, "nitrate", 23)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
getData <- function(directory, id) {
createFileName <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
createFilePath <- paste(directory, "/", createFileName, sep = "")
inputData <- read.csv(createFilePath)
obsClean <- na.omit(inputData)
obsCleanCount <- nrow(obsClean)
list(id = id, nobs = obsCleanCount)
}
complete <- function(directory, id = 1:332) {
completeLists <- Map(function(id) getData(directory, id), id)
matrix <- do.call(rbind, completeLists)
as.data.frame(matrix)
}
}
complete("specdata", 1)
dir <- "/Volumes/data/code/datasciencecoursera/RProgramming/prog1/specdata"
complete("specdata", 1)
complete(dir,1)
createFileName <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
createFilePath <- paste(directory, "/", createFileName, sep = "")
inputData <- read.csv(createFilePath)
obsClean <- na.omit(inputData)
obsCleanCount <- nrow(obsClean)
list(id = id, nobs = obsCleanCount)
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
completeLists <- Map(function(id) getData(directory, id), id)
matrix <- do.call(rbind, completeLists)
as.data.frame(matrix)
}
getData <- function(directory, id) {
createFileName <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
createFilePath <- paste(directory, "/", createFileName, sep = "")
inputData <- read.csv(createFilePath)
obsClean <- na.omit(inputData)
obsCleanCount <- nrow(obsClean)
list(id = id, nobs = obsCleanCount)
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
completeLists <- Map(function(id) getData(directory, id), id)
matrix <- do.call(rbind, completeLists)
as.data.frame(matrix)
}
dir <- "/Volumes/data/code/datasciencecoursera/RProgramming/prog1/specdata"
complete(dir,1)
complete(dir,c(2,4,8,10.12))
complete(dir,c(2,4,8,10,12))
complete(dir,30:25)
complete(dir,3)
getData <- function(directory, id) {
createFileName <- paste(formatC(id, width = 3, flag = "0"), ".csv", sep = "")
createFilePath <- paste(directory, "/", createFileName, sep = "")
inputData <- read.csv(createFilePath)
na.omit(inputData)
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
frames <- Map(function(threshold) getData(directory, threshold), 1:332)
framesAboveThreshold <- Filter(function(frame) dim(frame)[1] > threshold, frames)
correlationList <- Map(function(frame) { cor(frame$sulfate, frame$nitrate)}, framesAboveThreshold)
correlations <- unlist(correlationList)
if (length(correlations) > 0) correlations
else vector("numeric", 0)
}
}
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
dir <- "/Volumes/data/code/datasciencecoursera/RProgramming/prog1/specdata"
source("/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R")
pollutantmean(dir, "sulfate", 1:10)
pollutantmean(dir, "nitrate", 70:72)
pollutantmean(dir, "nitrate", 23)
source("/Volumes/data/code/datasciencecoursera/RProgramming/prog1/complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete(dir, 1)
complete(dir, c(2, 4, 8, 10, 12))
complete(dir, 30:25)
source("/Volumes/data/code/datasciencecoursera/RProgramming/prog1/corr.R")
source("/Volumes/data/code/datasciencecoursera/RProgramming/prog1/complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
cr <- corr(dir, 150)
head(cr)
summary(cr)
cr <- corr(dir, 400)
head(cr)
summary(cr)
cr <- corr(dir, 5000)
summary(cr)
length(cr)
cr <- corr(dir)
summary(cr)
length(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
5
submit()
submit()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source('/Volumes/data/code/datasciencecoursera/RProgramming/prog1/pollutantmean.R')
source("/Volumes/data/code/datasciencecoursera/RProgramming/prog1/r-prog-scripts-submitscript1.R")
source("/Volumes/data/code/datasciencecoursera/RProgramming/prog1/rprog-scripts-submitscript1.R")
submit()
source("/Volumes/data/code/datasciencecoursera/RProgramming/prog1/rprog-scripts-submitscript1.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 0
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <-10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if (x< 3){NA} else {10}
y <- if (x < 3) {10} else {NA}
library(datesets)
library(datasets)
data(iris)
?iris
iris.Sepal.Length
iris.Sepal
iris
View(iris)
help(mean)
with(iris, tapply(Sepal.Length, Species, mean))
apply(iris, 1, mean)
apply(iris[,1:4],2,mean)
colMeans(iris)
rowMeans(iris[,1:4])
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(mtcars,cyl,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
mean(mtcars$mpg,mtcars$cyl)
View(mtcars)
tapply(mtcars$cyl,mtcars$hp,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
debug(ls)
ls
help(ls)
ls()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##   updateMatrix - updates the matrix
updateMatrix <- function(y) {
x <<- y
m <<- NULL
}
##   get - gets the matrix
get <- function() x
##   updateMatrixInverse - creates the cached matrix
updateMatrixInverse <- function(inverse) m <<- inverse
##   getInverse - gets the cached matrix
getInverse <- function() m
list(updateMatrix = updateMatrix, get = get,
updateMatrixInverse = updateMatrixInverse,
getInverse = getInverse)
}
## This funciton computes thje inverse of the special "matrix" returned by makeCacheMatrix
##   If the inverse has already been calculated, it will retrieve the inverse from cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
## m is not null, inversion exists, grab from cache
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$updateMatrixInverse(m)
return(m)
}
test <- matrix(runif(9,1,100),3,3)
testCached <- makeCacheMatrix(test)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
help(list)
source("/volumes/data/code/datasciencecoursera/RProgramming/prog3/rprog-scripts-submitscript3.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
warnings()
x <- hilbert(4000)
hilbert <- function(n) {}
hilbert <- function(n) { 1 <- 1:n}
hilbert <- function (n) {
i <- 1:n
1 / outer (i-1,i,"+")
}
x <- hilbert(4000)
system.time(svd(x))
View(x)
system.time(svd(x))
x <- hilbert(1000)
system.time(svd(x))
set.seed(1)
rpois(5, 2)
help(rnorm)
help(dnorm)
